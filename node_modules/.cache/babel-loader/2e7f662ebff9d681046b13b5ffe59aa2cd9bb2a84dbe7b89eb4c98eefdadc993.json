{"ast":null,"code":"var _jsxFileName = \"/Users/sheng/Documents/GitHub/SDMSS/src/Manager/report/GenerateReport.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GenerateReport() {\n  _s();\n  const [data, setData] = useState();\n  const [sales, setSales] = useState();\n  const [customer, setCustomer] = useState();\n  const apiUrl_tx = process.env.REACT_APP_API_URL_TX;\n  const getTotalSales = () => {\n    const total = data.reduce((acc, curr) => acc + curr.totalprice, 0);\n    setSales(total);\n    console.log(total);\n  };\n  useEffect(() => {\n    //load data on page load \n    fetch(`${apiUrl_tx}/transaction`).then(response => response.json()).then(data => {\n      setData(data);\n      getTotalSales();\n    }).catch(error => console.error(error));\n  }, []);\n  const GenerateReport = type => {\n\n    //need transaction \n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-white d-flex-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: sales\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Total Customer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n}\n_s(GenerateReport, \"cYjdPef4I2LYvDaomEIR9H1yMik=\");\n_c = GenerateReport;\nexport default GenerateReport;\n\n/*\n  const GenerateReport = (type) => {\n    if (type === \"weekly\"){\n    //weekly sales\n    const today = new Date();\n    const oneWeekAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);\n  \n    fetch(`${apiUrl_tx}/transaction`)\n    .then((response) => response.json())\n    .then((data) => {\n      const filteredSales = data.filter((sale) => {\n        const saleDateStr = sale.date;\n        const [day, month, year] = saleDateStr.split(\"/\");\n        const saleDate = new Date(year, month - 1, day);\n        return saleDate >= oneWeekAgo && saleDate <= today;\n      });\n\n      setSales(filteredSales);\n      setShow(\"weekly\")\n    })\n    .catch((error) => console.error(error));\n  }\n\n  else if (type == \"monthly\") { //monthly\n    const today = new Date();\n    const thirtyDaysAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 30);\n\n    fetch(`${apiUrl_tx}/transaction`)\n    .then((response) => response.json())\n    .then((data) => {\n      const filteredSales = data.filter((sale) => {\n        const saleDateStr = sale.date;\n        const [day, month, year] = saleDateStr.split(\"/\");\n        const saleDate = new Date(year, month - 1, day);\n        return saleDate >= thirtyDaysAgo && saleDate <= today;\n      });\n      console.log(filteredSales)\n      setSales(filteredSales);\n      setShow(\"monthly\")\n    })\n    .catch((error) => console.error(error));\n    console.log('tet')\n    }\n\n*/\nvar _c;\n$RefreshReg$(_c, \"GenerateReport\");","map":{"version":3,"names":["React","useEffect","useState","GenerateReport","data","setData","sales","setSales","customer","setCustomer","apiUrl_tx","process","env","REACT_APP_API_URL_TX","getTotalSales","total","reduce","acc","curr","totalprice","console","log","fetch","then","response","json","catch","error","type"],"sources":["/Users/sheng/Documents/GitHub/SDMSS/src/Manager/report/GenerateReport.jsx"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nfunction GenerateReport() {\n  const [data, setData] = useState();\n  const [sales ,setSales] = useState();\n  const [customer , setCustomer] = useState();\n\n  const apiUrl_tx = process.env.REACT_APP_API_URL_TX;\n\n  const getTotalSales = () =>{\n    const total = data.reduce((acc, curr) => acc + curr.totalprice, 0);\n    setSales(total)\n    console.log(total)\n  }\n\n  useEffect(() => { //load data on page load \n    fetch(`${apiUrl_tx}/transaction`)\n    .then(response => response.json())\n    .then(data => {\n         setData(data);\n         getTotalSales()\n    })\n    .catch(error => console.error(error));\n  }, []);\n\n\n\n\n  const GenerateReport = (type) => {\n\n  //need transaction \n  }\n  return (\n     <>\n     <div className=\"text-white d-flex-column\">\n          <div >\n            {sales} \n          </div>\n          <div>\n            Total Customer\n          </div>\n     </div>\n     </>\n  );\n}\n\nexport default GenerateReport;\n\n/*\n  const GenerateReport = (type) => {\n    if (type === \"weekly\"){\n    //weekly sales\n    const today = new Date();\n    const oneWeekAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);\n  \n    fetch(`${apiUrl_tx}/transaction`)\n    .then((response) => response.json())\n    .then((data) => {\n      const filteredSales = data.filter((sale) => {\n        const saleDateStr = sale.date;\n        const [day, month, year] = saleDateStr.split(\"/\");\n        const saleDate = new Date(year, month - 1, day);\n        return saleDate >= oneWeekAgo && saleDate <= today;\n      });\n\n      setSales(filteredSales);\n      setShow(\"weekly\")\n    })\n    .catch((error) => console.error(error));\n  }\n\n  else if (type == \"monthly\") { //monthly\n    const today = new Date();\n    const thirtyDaysAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 30);\n\n    fetch(`${apiUrl_tx}/transaction`)\n    .then((response) => response.json())\n    .then((data) => {\n      const filteredSales = data.filter((sale) => {\n        const saleDateStr = sale.date;\n        const [day, month, year] = saleDateStr.split(\"/\");\n        const saleDate = new Date(year, month - 1, day);\n        return saleDate >= thirtyDaysAgo && saleDate <= today;\n      });\n      console.log(filteredSales)\n      setSales(filteredSales);\n      setShow(\"monthly\")\n    })\n    .catch((error) => console.error(error));\n    console.log('tet')\n    }\n\n*/"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAE5C,SAASC,cAAc,GAAG;EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGH,QAAQ,EAAE;EAClC,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,EAAE;EACpC,MAAM,CAACM,QAAQ,EAAGC,WAAW,CAAC,GAAGP,QAAQ,EAAE;EAE3C,MAAMQ,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;EAElD,MAAMC,aAAa,GAAG,MAAK;IACzB,MAAMC,KAAK,GAAGX,IAAI,CAACY,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,UAAU,EAAE,CAAC,CAAC;IAClEZ,QAAQ,CAACQ,KAAK,CAAC;IACfK,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;EACpB,CAAC;EAEDd,SAAS,CAAC,MAAM;IAAE;IAChBqB,KAAK,CAAE,GAAEZ,SAAU,cAAa,CAAC,CAChCa,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACnB,IAAI,IAAI;MACTC,OAAO,CAACD,IAAI,CAAC;MACbU,aAAa,EAAE;IACpB,CAAC,CAAC,CACDY,KAAK,CAACC,KAAK,IAAIP,OAAO,CAACO,KAAK,CAACA,KAAK,CAAC,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;EAKN,MAAMxB,cAAc,GAAIyB,IAAI,IAAK;;IAEjC;EAAA,CACC;EACD,oBACG;IAAA,uBACA;MAAK,SAAS,EAAC,0BAA0B;MAAA,wBACpC;QAAA,UACGtB;MAAK;QAAA;QAAA;QAAA;MAAA,QACF,eACN;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAEM;IAAA;MAAA;MAAA;MAAA;IAAA;EACL,iBACH;AAER;AAAC,GA1CQH,cAAc;AAAA,KAAdA,cAAc;AA4CvB,eAAeA,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}