{"ast":null,"code":"var _jsxFileName = \"/Users/sheng/Documents/GitHub/SDMSS/src/Manager/report/GenerateReport.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GenerateReport() {\n  _s();\n  const [data, setData] = useState();\n  const [sales, setSales] = useState();\n  const [customer, setCustomer] = useState();\n  const [movieRankings, setMovieRankings] = useState();\n  const apiUrl_tx = process.env.REACT_APP_API_URL_TX;\n  const getTotalSales = () => {\n    const total = data.reduce((acc, curr) => acc + curr.totalprice, 0);\n    setSales(total);\n  };\n  console.log(movieRankings);\n  useEffect(() => {\n    //load data on page load \n\n    fetch(`${apiUrl_tx}/transaction`).then(response => response.json()).then(data => {\n      setData(data);\n      const totalsales = data.reduce((acc, curr) => acc + curr.totalprice, 0);\n      setSales(totalsales);\n      const movieCounts = {};\n      data.forEach(transaction => {\n        const movieName = transaction.movie_name;\n        if (movieCounts[movieName]) {\n          movieCounts[movieName]++;\n        } else {\n          movieCounts[movieName] = 1;\n        }\n      });\n      const movieRankings = Object.keys(movieCounts).map(movieName => ({\n        movieName,\n        count: movieCounts[movieName]\n      })).sort((a, b) => b.count - a.count);\n      setMovieRankings(movieRankings);\n    }).catch(error => console.error(error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-white d-flex-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Total Customer:   \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), sales]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n}\n_s(GenerateReport, \"5vHOMHodpANDerKoxFEY4UVsM4k=\");\n_c = GenerateReport;\nexport default GenerateReport;\n\n/*\n  const GenerateReport = (type) => {\n    if (type === \"weekly\"){\n    //weekly sales\n    const today = new Date();\n    const oneWeekAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);\n  \n    fetch(`${apiUrl_tx}/transaction`)\n    .then((response) => response.json())\n    .then((data) => {\n      const filteredSales = data.filter((sale) => {\n        const saleDateStr = sale.date;\n        const [day, month, year] = saleDateStr.split(\"/\");\n        const saleDate = new Date(year, month - 1, day);\n        return saleDate >= oneWeekAgo && saleDate <= today;\n      });\n\n      setSales(filteredSales);\n      setShow(\"weekly\")\n    })\n    .catch((error) => console.error(error));\n  }\n\n  else if (type == \"monthly\") { //monthly\n    const today = new Date();\n    const thirtyDaysAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 30);\n\n    fetch(`${apiUrl_tx}/transaction`)\n    .then((response) => response.json())\n    .then((data) => {\n      const filteredSales = data.filter((sale) => {\n        const saleDateStr = sale.date;\n        const [day, month, year] = saleDateStr.split(\"/\");\n        const saleDate = new Date(year, month - 1, day);\n        return saleDate >= thirtyDaysAgo && saleDate <= today;\n      });\n      console.log(filteredSales)\n      setSales(filteredSales);\n      setShow(\"monthly\")\n    })\n    .catch((error) => console.error(error));\n    console.log('tet')\n    }\n\n*/\nvar _c;\n$RefreshReg$(_c, \"GenerateReport\");","map":{"version":3,"names":["React","useEffect","useState","GenerateReport","data","setData","sales","setSales","customer","setCustomer","movieRankings","setMovieRankings","apiUrl_tx","process","env","REACT_APP_API_URL_TX","getTotalSales","total","reduce","acc","curr","totalprice","console","log","fetch","then","response","json","totalsales","movieCounts","forEach","transaction","movieName","movie_name","Object","keys","map","count","sort","a","b","catch","error"],"sources":["/Users/sheng/Documents/GitHub/SDMSS/src/Manager/report/GenerateReport.jsx"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nfunction GenerateReport() {\n  const [data, setData] = useState();\n  const [sales ,setSales] = useState();\n  const [customer , setCustomer] = useState();\n  const [movieRankings , setMovieRankings] = useState()\n\n  const apiUrl_tx = process.env.REACT_APP_API_URL_TX;\n\n  const getTotalSales = () =>{\n    const total = data.reduce((acc, curr) => acc + curr.totalprice, 0);\n    setSales(total)\n    \n  }\n\n  console.log(movieRankings)\n  useEffect(() => { //load data on page load \n\n\n    fetch(`${apiUrl_tx}/transaction`)\n    .then(response => response.json())\n    .then(data => {\n         setData(data);\n         const totalsales = data.reduce((acc, curr) => acc + curr.totalprice, 0);\n         setSales(totalsales)\n         const movieCounts = {};\n         data.forEach(transaction => {\n           const movieName = transaction.movie_name;\n           if (movieCounts[movieName]) {\n             movieCounts[movieName]++;\n           } else {\n             movieCounts[movieName] = 1;\n           }\n         });\n     \n         const movieRankings = Object.keys(movieCounts)\n           .map(movieName => ({ movieName, count: movieCounts[movieName] }))\n           .sort((a, b) => b.count - a.count);\n     \n         setMovieRankings(movieRankings);\n    })\n    .catch(error => console.error(error));\n  }, []);\n\n  return (\n     <>\n     <div className=\"text-white d-flex-column\">\n          <div >\n            <label>Total Customer:   </label>\n            { sales} \n          </div>\n          <div>\n          </div>\n     </div>\n     </>\n  );\n}\n\nexport default GenerateReport;\n\n/*\n  const GenerateReport = (type) => {\n    if (type === \"weekly\"){\n    //weekly sales\n    const today = new Date();\n    const oneWeekAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);\n  \n    fetch(`${apiUrl_tx}/transaction`)\n    .then((response) => response.json())\n    .then((data) => {\n      const filteredSales = data.filter((sale) => {\n        const saleDateStr = sale.date;\n        const [day, month, year] = saleDateStr.split(\"/\");\n        const saleDate = new Date(year, month - 1, day);\n        return saleDate >= oneWeekAgo && saleDate <= today;\n      });\n\n      setSales(filteredSales);\n      setShow(\"weekly\")\n    })\n    .catch((error) => console.error(error));\n  }\n\n  else if (type == \"monthly\") { //monthly\n    const today = new Date();\n    const thirtyDaysAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 30);\n\n    fetch(`${apiUrl_tx}/transaction`)\n    .then((response) => response.json())\n    .then((data) => {\n      const filteredSales = data.filter((sale) => {\n        const saleDateStr = sale.date;\n        const [day, month, year] = saleDateStr.split(\"/\");\n        const saleDate = new Date(year, month - 1, day);\n        return saleDate >= thirtyDaysAgo && saleDate <= today;\n      });\n      console.log(filteredSales)\n      setSales(filteredSales);\n      setShow(\"monthly\")\n    })\n    .catch((error) => console.error(error));\n    console.log('tet')\n    }\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}