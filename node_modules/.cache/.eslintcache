[{"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\index.js":"1","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\App.js":"2","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\GlobalStore.js":"3","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\Login.js":"4","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\User.js":"5","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\Home.js":"6","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\ReviewRating.js":"7","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\CreateAccount.js":"8","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\LoyaltyPage.js":"9","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\LoyaltyTransaction.js":"10","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\FoodAndDrink.js":"11","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\NavBar.js":"12","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\Reducer.js":"13","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\NavBarUser.js":"14","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\GetReviewRating.js":"15","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\NavBarStaff.js":"16","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\BookTicket.js":"17","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\StaffFoodandDrink.js":"18","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\StaffSetLoyaltyStatus.js":"19","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\StaffSetOrderStatus.js":"20","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\SelectSeats.js":"21","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\StaffBookTicket.js":"22","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\StaffSelectSeats.js":"23","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\SystemAdmin\\SystemAdminMain.jsx":"24","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\ManagerMain.jsx":"25","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\SystemAdmin\\Create\\CreateUserProfile.jsx":"26","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\SystemAdmin\\Create\\CreateUserAcc.jsx":"27","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\SystemAdmin\\View\\ViewUserAcc.jsx":"28","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\SystemAdmin\\View\\ViewUserProfile.jsx":"29","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\create\\CreateMovie.jsx":"30","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\create\\CreateMovieSess.jsx":"31","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\create\\CreateRoom.jsx":"32","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\view\\ViewMovie.jsx":"33","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\view\\ViewRoom.jsx":"34","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\view\\viewSession.jsx":"35","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\report\\GenerateReport.jsx":"36","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\SuccessModal.jsx":"37"},{"size":234,"mtime":1683098684863,"results":"38","hashOfConfig":"39"},{"size":3023,"mtime":1684128124212,"results":"40","hashOfConfig":"39"},{"size":1410,"mtime":1683098684853,"results":"41","hashOfConfig":"39"},{"size":5472,"mtime":1684478886521,"results":"42","hashOfConfig":"39"},{"size":8767,"mtime":1684491911225,"results":"43","hashOfConfig":"39"},{"size":7147,"mtime":1684492065510,"results":"44","hashOfConfig":"39"},{"size":5244,"mtime":1684487628199,"results":"45","hashOfConfig":"39"},{"size":4381,"mtime":1684479210702,"results":"46","hashOfConfig":"39"},{"size":8848,"mtime":1684486283315,"results":"47","hashOfConfig":"39"},{"size":5158,"mtime":1684486650454,"results":"48","hashOfConfig":"39"},{"size":6017,"mtime":1684485007789,"results":"49","hashOfConfig":"39"},{"size":492,"mtime":1683098684855,"results":"50","hashOfConfig":"39"},{"size":558,"mtime":1683098684857,"results":"51","hashOfConfig":"39"},{"size":2679,"mtime":1684487189862,"results":"52","hashOfConfig":"39"},{"size":901,"mtime":1684485462568,"results":"53","hashOfConfig":"39"},{"size":1238,"mtime":1684488932143,"results":"54","hashOfConfig":"39"},{"size":3354,"mtime":1684479851311,"results":"55","hashOfConfig":"39"},{"size":5819,"mtime":1684489336267,"results":"56","hashOfConfig":"39"},{"size":4868,"mtime":1684490778377,"results":"57","hashOfConfig":"39"},{"size":6395,"mtime":1684491509144,"results":"58","hashOfConfig":"39"},{"size":9154,"mtime":1684481858045,"results":"59","hashOfConfig":"39"},{"size":3124,"mtime":1684489106852,"results":"60","hashOfConfig":"39"},{"size":8879,"mtime":1684490030205,"results":"61","hashOfConfig":"39"},{"size":2169,"mtime":1684309286615,"results":"62","hashOfConfig":"39"},{"size":3889,"mtime":1684309286507,"results":"63","hashOfConfig":"39"},{"size":2017,"mtime":1684309286603,"results":"64","hashOfConfig":"39"},{"size":3892,"mtime":1684309286587,"results":"65","hashOfConfig":"39"},{"size":9908,"mtime":1684309286623,"results":"66","hashOfConfig":"39"},{"size":6745,"mtime":1684309286631,"results":"67","hashOfConfig":"39"},{"size":3350,"mtime":1684309286527,"results":"68","hashOfConfig":"39"},{"size":6293,"mtime":1684309286539,"results":"69","hashOfConfig":"39"},{"size":1983,"mtime":1684309286551,"results":"70","hashOfConfig":"39"},{"size":9299,"mtime":1684309286555,"results":"71","hashOfConfig":"39"},{"size":8012,"mtime":1684309286567,"results":"72","hashOfConfig":"39"},{"size":11236,"mtime":1684309286579,"results":"73","hashOfConfig":"39"},{"size":4016,"mtime":1684130743387,"results":"74","hashOfConfig":"39"},{"size":517,"mtime":1684131395633,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"xi3c6n",{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"79"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"79"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"79"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"79"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"79"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"79"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"79"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"79"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\index.js",[],[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\App.js",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\GlobalStore.js",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\Login.js",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\User.js",["196","197","198"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\Home.js",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\ReviewRating.js",["199"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\CreateAccount.js",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\LoyaltyPage.js",["200"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\LoyaltyTransaction.js",["201"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\FoodAndDrink.js",["202"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\NavBar.js",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\Reducer.js",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\NavBarUser.js",["203","204","205","206","207","208"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\GetReviewRating.js",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\NavBarStaff.js",["209"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\BookTicket.js",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\StaffFoodandDrink.js",["210","211","212"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\StaffSetLoyaltyStatus.js",["213","214","215"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\StaffSetOrderStatus.js",["216","217","218"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\SelectSeats.js",["219","220"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\StaffBookTicket.js",["221"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\StaffSelectSeats.js",["222","223"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\SystemAdmin\\SystemAdminMain.jsx",["224","225","226","227"],[],"import { useState } from \"react\";\r\n\r\n//imports\r\nimport CreateUserAcc from \"./Create/CreateUserAcc\";\r\nimport ViewUserAcc from \"./View/ViewUserAcc\";\r\nimport CreateUserProfile from \"./Create/CreateUserProfile\";\r\nimport ViewUserProfile from \"./View/ViewUserProfile\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction SystemAdmin() {\r\n  const [Option, setOption] = useState('Cuser');//set default val\r\n  const history = useNavigate();\r\n\r\n  const handleOptionChange = (event) => {\r\n       setOption(event.target.value);\r\n  };\r\n\r\n    \r\n  const logout = () => {\r\n\r\n     const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n     console.log(currentUser)\r\n     fetch( `http://localhost:8030/usersession/${currentUser}`,{\r\n         method: 'DELETE',\r\n         headers: {\r\n           'Content-Type': 'application/json'\r\n         }\r\n     }).then(()=>{\r\n         \r\n         history(\"/\")\r\n     })\r\n }\r\n  return (\r\n    <>\r\n    <div style={{maxWidth : '1000px', margin : '0 auto'}}>\r\n         <div className=\"d-flex justify-content-between align-items-center\">\r\n              <div className=\" text-white d-flex align-items-center text-left p-3 \">\r\n                   <p className=\"m-0\"  style={{width:'100px'}}>Toggle:</p>\r\n                   <select className=\"form-select\" value={Option} onChange={handleOptionChange}  style={{width:'200px'}}>\r\n                        <option value=\"Cuser\">Create User Account</option>\r\n                        <option value=\"Vuser\">View User Account</option>\r\n                        <option value=\"Cprofile\">Create User Profile</option>\r\n                        <option value=\"Vprofile\">View User Profile</option>\r\n                   </select>\r\n              </div>\r\n              <button onClick={logout} className=\"p-2 text-red\">logout</button>\r\n         </div>\r\n\r\n         <div style={{width : '100%'}}>\r\n              {Option == \"Cuser\" && <CreateUserAcc/>}\r\n              {Option == \"Vuser\" && <ViewUserAcc/>}\r\n              {Option == \"Cprofile\" && <CreateUserProfile/>}\r\n              {Option == \"Vprofile\" && <ViewUserProfile/>}\r\n         </div>\r\n\r\n    </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SystemAdmin;\r\n","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\ManagerMain.jsx",["228","229","230","231","232","233","234","235","236"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\SystemAdmin\\Create\\CreateUserProfile.jsx",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\SystemAdmin\\Create\\CreateUserAcc.jsx",["237"],[],"import { useEffect, useState } from \"react\";\r\nimport SuccessModel from \"../../components/SuccessModal\";\r\nfunction CreateUserAcc() {\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n     id : \"\",\r\n     name : \"\",\r\n     username : \"\",\r\n     loyaltypoint: 0,\r\n     seatpref : \"\",\r\n     email : \"\",\r\n     password : \"\",\r\n     status: \"Active\",\r\n     acctype : \"\"});\r\n  const apiUrl = process.env.REACT_APP_API_URL_USERACC;\r\n  const apiUrl_profile =  process.env.REACT_APP_API_URL_USEPROFILE;\r\n  const [profile, setProfile] = useState()\r\n\r\n  useEffect(() => {\r\n     fetch(`${apiUrl_profile}/Userprofile`)\r\n          .then((response) => response.json())\r\n          .then((data) => setProfile(data))\r\n          .catch((error) => console.error(error));\r\n  } , [])\r\n\r\n\r\n  const handleSubmit = e =>{\r\n     e.preventDefault();\r\n     fetch(`${apiUrl}/user`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(formData),\r\n        })\r\n          .then((response) => response.json())\r\n          .then((data) => setShowModal(true))\r\n          .catch((error) => console.error(error));\r\n  }\r\n\r\n  const handleEdit = e => {\r\n     const { id, value } = e.target;\r\n     setFormData((prevFormData) => ({ ...prevFormData, [id]: value }));\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n     setShowModal(false); \r\n};\r\n     return (\r\n          <>\r\n          <form onSubmit={handleSubmit} className=\"CreateMovie text-white bg-dark d-flex-column \" style={{height : \"1000px\"}}>\r\n          <div className=\"form-group d-flex align-items-center text-left p-3 \">\r\n               <label className=\"col-form-label\"  style={{width:'100px'}}>Name:</label>\r\n               <input id=\"name\" className=\"form-control\" type=\"text\" style={{ width: '400px'}}  onChange={handleEdit} ></input>\r\n          </div>\r\n          <div className=\"form-group d-flex align-items-center text-left p-3 \">\r\n               <label className=\"col-form-label\"  style={{width:'100px'}}>Username:</label>\r\n               <input id=\"username\" className=\"form-control\" type=\"text\" style={{ width: '400px'}}  onChange={handleEdit} ></input>\r\n          </div>\r\n          <div className=\"form-group d-flex align-items-center text-left p-3 \">\r\n               <label className=\"col-form-label\"  style={{width:'100px'}}>Email:</label>\r\n               <input id=\"email\" className=\"form-control\" type=\"text\" style={{ width: '400px'}}  onChange={handleEdit} ></input>\r\n          </div>\r\n          <div className=\"form-group d-flex align-items-center text-left p-3 \">\r\n               <p className=\"col-form-label\"  style={{width:'100px'}}>Password:</p>\r\n               <input id=\"password\" className=\"form-control\" type=\"text\" style={{ width: '400px'}} onChange={handleEdit} ></input>\r\n          </div>\r\n          <div className=\"form-group d-flex p-3\">\r\n               <p className=\"col-form-label\" style={{width:'100px'}}>Select Account Type:  </p>\r\n               <select id=\"acctype\" className=\"form-select text-wrap\" style={{ width: '400px'}} onChange={handleEdit}>\r\n                    {/* got data then use map to populate the dd */}\r\n                    {profile?.map((item) => (\r\n                         <>\r\n                              <option value={item.UserProfile} key={item.id}>{item.UserProfile}</option>\r\n                         </>\r\n                    ))}\r\n               </select>\r\n          </div>\r\n          <div className=\"d-flex justify-content-center  p-3\">\r\n               <button type=\"submit\"  className=\"btn btn-danger\">Create</button>\r\n          </div>\r\n  </form>\r\n       \r\n       <SuccessModel \r\n       message = \"User Successfully Created !\" \r\n       show = {showModal}\r\n       handleClose={handleCloseModal}\r\n     />\r\n       </>\r\n     );\r\n   }\r\n   \r\n   export default CreateUserAcc;\r\n   ","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\SystemAdmin\\View\\ViewUserAcc.jsx",["238","239","240"],[],"import { useState, useEffect } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nfunction ViewUserAcc(){\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showConfirmModal, setConfirmModal] = useState(false);\r\n  const [data, setData] = useState([])\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [query, setQuery] = useState('');\r\n  const [type, setType] = useState('');\r\n\r\n  const apiUrl = process.env.REACT_APP_API_URL_USERACC;\r\n\r\n  const loadData = () => {\r\n    fetch(`${apiUrl}/user`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      setData(data)\r\n    })\r\n    .catch(error => console.error(error));\r\n  }\r\n  useEffect(() => { //load data on page load \r\n    loadData()\r\n  }, [filteredData, query]);\r\n\r\n\r\n  const handleUpdate = (id) => { //filter by id and pass to modal\r\n    setFilteredData(data.filter((userData) => userData.id === id));\r\n    // filteredData will now contain an array with only the movie data objects that match the given id\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleChange = event => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false); \r\n    setConfirmModal(false);\r\n    setType('');\r\n  };\r\n\r\n  const confirmModal = (id, status) => {\r\n    setFilteredData(data.filter((userData) => userData.id === id));\r\n    //delete modal\r\n    if (status === \"Active\") {\r\n      setType(\"suspend\")\r\n    }\r\n    else if (status === \"Suspended\") {\r\n      setType(\"unsuspend\")\r\n    }\r\n    else (setType(\"delete\"))\r\n    setConfirmModal(true); \r\n  }\r\n\r\n  const handleSubmit = (e)=> {\r\n    e.preventDefault();\r\n    fetch(`${apiUrl}/user?email=${query}`)\r\n      .then(response => response.json())\r\n      .then(data => setData(data))\r\n      .catch(error => console.error(error));\r\n  };\r\n\r\n     return(\r\n      <>\r\n       <div className=\"d-flex justify-content-end\">\r\n        <form className=\"input-group p-3\" style={{width : \"350px\"}}   onSubmit={handleSubmit}>\r\n          <input class=\"form-control border \" type={\"text\"} value={query} onChange={handleChange} ></input>\r\n        <button  className=\"btn btn-light\" type=\"submit\">search</button>\r\n        </form>\r\n      </div>\r\n      <table className=\"text-black\" style={{backgroundColor : \"whitesmoke\", width : '1000px'}}>\r\n      <thead>\r\n        <tr className=\"d-flex-column\" style={{backgroundColor : \"orange\"}}>\r\n          <th scope=\"col\">Name</th>\r\n          <th scope=\"col\">Email</th>\r\n          <th scope=\"col\">Account Type</th>\r\n          <th scope=\"col\">Status</th>\r\n          <th scope=\"col\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.length == 0 ?  (<p className=\"p-3 text-black\">No Matching Records</p>) : (\r\n        data?.map((acc) => (\r\n          <>\r\n          <tr key={acc.email}>\r\n            <td className=\"p-2\">{acc.username}</td>\r\n            <td className=\"p-2\">{acc.email}</td>\r\n            <td className=\"p-2\">{acc.acctype}</td>\r\n            <td className='p-2' style={{ color: acc.status === \"Active\" ? \"royalblue\" : \"red\"}}>{acc.status}</td>\r\n            <td>\r\n              <div className=\"d-flex align-items-center justify-content-end\"> \r\n                    <button type=\"button\" className=\"btn text-white m-1 \" style={{backgroundColor : \"royalblue\"}}\r\n                        onClick={() => handleUpdate(acc.id)}>\r\n                        Update\r\n                      </button>\r\n                  <button type=\"button\" className=\"btn text-white m-1\" style={{backgroundColor : \"red\"}} onClick={()=> confirmModal(acc.id, \"delete\")}>Delete</button>\r\n                    <button type=\"button\" className=\"btn text-white m-1\" style={{backgroundColor : \"red\"}} onClick={()=> confirmModal(acc.id, acc.status)}>{acc.status === \"Active\" ? \"Suspend\" : \"Unsuspend\"}</button>\r\n               </div>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n              <td colSpan=\"6\" className=\"border-bottom\"></td>\r\n          </tr>\r\n          </>\r\n        ))) }\r\n      </tbody>\r\n     </table>\r\n     {showModal === true  && \r\n      <UpdateUserAccount\r\n        data={filteredData}\r\n        setData = {setFilteredData} //setData to reload parent\r\n        show={showModal}\r\n        handleClose={handleCloseModal}/>\r\n     }\r\n      {showConfirmModal === true && type === \"delete\" &&\r\n     <DeleteUserAcc\r\n          data={filteredData}\r\n          setData = {setFilteredData}\r\n          show={showConfirmModal}\r\n          handleClose={handleCloseModal}/>\r\n      }\r\n      {showConfirmModal === true && (type === \"suspend\" || type === \"unsuspend\") &&\r\n     <SuspendUserAcc\r\n          type = {type}\r\n          data={filteredData}\r\n          setData = {setFilteredData}\r\n          show={showConfirmModal}\r\n          handleClose={handleCloseModal}/>\r\n      }\r\n     </>\r\n     );\r\n}\r\n\r\nexport default ViewUserAcc;\r\n\r\n\r\nconst UpdateUserAccount = ({data, setData, show, handleClose}) => {\r\n  const apiUrl_User = process.env.REACT_APP_API_URL_USERACC;\r\n  const apiUrl_profile =  process.env.REACT_APP_API_URL_USEPROFILE;\r\n  const [profile, setProfile] = useState()\r\n  const [formData, setFormData] = useState(data[0]);\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(`${apiUrl_profile}/Userprofile`)\r\n         .then((response) => response.json())\r\n         .then((data) => setProfile(data))\r\n         .catch((error) => console.error(error));\r\n } , [])\r\n\r\n  const handleEdit = (event) => {\r\n    const { id, value } = event.target;\r\n    setFormData((prevFormData) => ({ ...prevFormData, [id]: value }));\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    fetch(`${apiUrl_User}/user/${formData.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setData(\"re-load parent\")\r\n        handleClose();\r\n        \r\n      })\r\n      .catch((error) => console.error(error));\r\n  }\r\n  return(\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n      <Modal.Body>\r\n      <form  onSubmit={handleSubmit}>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"username\"  class=\"col-form-label text-dark\">username:</label>\r\n            <input type=\"text\" onChange={handleEdit}  value={formData.username} class=\"form-control \" id=\"username\"></input>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"Email\"  class=\"col-form-label text-dark\">Email:</label>\r\n            <input type=\"text\" disabled onChange={handleEdit}  value={formData.email} class=\"form-control\" id=\"email\"></input>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"Status\" class=\"col-form-label text-dark\">Status:</label>\r\n            <select class=\"form-control\" disabled onChange={handleEdit} value={formData.status} id=\"status\">\r\n              <option value=\"Suspend\">Suspend</option>\r\n              <option value=\"Active\">Active</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"Type\" class=\"col-form-label text-dark\">Type</label>\r\n            <select className=\"form-select\" onChange={handleEdit} value={formData.acctype} id=\"acctype\">\r\n                    {profile?.map((item) => (\r\n                         <>\r\n                              <option value={item.profile} key={item.id}>{item.profile}</option>\r\n                         </>\r\n                    ))}\r\n            </select>\r\n          </div>\r\n          <button type=\"submit\">Update</button>\r\n       </form>\r\n      </Modal.Body>\r\n      </Modal>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nconst DeleteUserAcc = ({data, setData, show , handleClose}) => {\r\n  const apiUrl_User = process.env.REACT_APP_API_URL_USERACC;\r\n  const handleDelete = e =>{\r\n    fetch(`${apiUrl_User}/user/${data[0].id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => \r\n        setData(\"reload\"))\r\n      .catch(error => console.error(error))\r\n\r\n    handleClose()\r\n  }\r\n  return(\r\n    <>\r\n    <Modal show={show} onHide={handleClose}>\r\n     <Modal.Body className=\"text-dark\">\r\n          Confirm Delete User ?\r\n     </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleDelete}>\r\n          Yes {/*handle delete/update*/}\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nconst SuspendUserAcc = ({type, data, setData, show , handleClose}) => {\r\n  const apiUrl_User = process.env.REACT_APP_API_URL_USERACC;\r\n  const handleSuspend = e =>{\r\n    if (type === \"unsuspend\"){\r\n      fetch(`${apiUrl_User}/user/${data[0].id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify( {...data[0], status : \"Active\"}),\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => \r\n          setData(\"reload\"))\r\n        .catch(error => console.error(error))\r\n\r\n      handleClose()\r\n    }\r\n    else if (type === \"suspend\") {\r\n      fetch(`${apiUrl_User}/user/${data[0].id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify( {...data[0], status : \"Suspended\"}),\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => \r\n          setData(\"reload\"))\r\n        .catch(error => console.error(error))\r\n\r\n      handleClose()\r\n    }\r\n  } \r\n  return(\r\n    <>\r\n    <Modal show={show} onHide={handleClose}>\r\n     <Modal.Body className=\"text-dark\">\r\n          {type === \"suspend\" ?  \"Confirm Suspend User ?\" : \"Confirm Unsuspend User ?\"}\r\n     </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleSuspend}>\r\n          Yes {/*handle delete/update*/}\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n    </>\r\n  )\r\n}","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\SystemAdmin\\View\\ViewUserProfile.jsx",["241","242"],[],"import { useState, useEffect } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nfunction ViewUserProfile() {\n    const [showModal, setShowModal] = useState(false);\n    const [showConfirmModal, setConfirmModal] = useState(false);\n    const [data, setData] = useState([])\n    const [filteredData, setFilteredData] = useState([]);\n    const [query, setQuery] = useState('');\n    const [type, setType] = useState('');\n\n    const apiUrl = process.env.REACT_APP_API_URL_USEPROFILE;\n\n    const loadData = () => {\n        fetch(`${apiUrl}/UserProfile`)\n        .then(response => response.json())\n        .then(data => {\n          setData(data)\n          \n        })\n        .catch(error => console.error(error));\n      }\n    \n    useEffect(() => { //load data on page load \n        loadData()\n        }, [filteredData, query]);\n\n    const handleUpdate = (id) => { //filter by id and pass to modal\n        setFilteredData(data.filter((userData) => userData.id === id));\n        // filteredData will now contain an array with only the movie data objects that match the given id\n        setShowModal(true);\n      };\n\n      const handleChange = event => {\n        setQuery(event.target.value);\n      };\n    \n      const handleCloseModal = () => {\n        setShowModal(false); \n        setConfirmModal(false);\n        setType('');\n      };\n\n      const confirmModal = (id) => {\n        setFilteredData(data.filter((userData) => userData.id === id));\n        setType(\"delete\");\n        setConfirmModal(true); \n      };\n\n      const handleSubmit = (e)=> {\n        e.preventDefault();\n        fetch(`${apiUrl}/Userprofile?UserProfile=${query}`)\n          .then(response => response.json())\n          .then(data => setData(data))\n          .catch(error => console.error(error));\n      };\n\n      return (\n        <>\n        <div className=\"d-flex justify-content-end\">\n            <form className=\"input-group p-3\" style={{width : \"350px\"}}   onSubmit={handleSubmit}>\n                <input class=\"form-control border \" type={\"text\"} value={query} onChange={handleChange} ></input>\n                <button  className=\"btn btn-light\" type=\"submit\">Search</button>\n            </form>\n        </div>\n      <table className=\"text-black\" style={{backgroundColor : \"whitesmoke\", width : '1000px'}}>\n      <thead>\n        <tr className=\"d-flex-column\" style={{backgroundColor : \"orange\"}}>\n            <th scope=\"col\">User Profile</th>\n            <th scope=\"col\"></th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.length == 0 ?  (<p className=\"p-3\">No Matching Records</p>) : (\n            data?.map((userprof) => (\n                <>\n                <tr key={userprof.UserProfile}>\n                    <td className=\"p-2\">{userprof.UserProfile}</td>\n                    <td>\n                        <div className=\"d-flex align-items-center justify-content-end\"> \n                            <button type=\"button\" className=\"btn text-white m-1 \" style={{backgroundColor : \"royalblue\"}}\n                                onClick={() => handleUpdate(userprof.id)}>\n                                Update\n                            </button>\n                            <button type=\"button\" className=\"btn text-white m-1\" style={{backgroundColor : \"red\"}} onClick={()=> confirmModal(userprof.id, \"delete\")}>Delete</button>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td colSpan=\"6\" className=\"border-bottom\"></td>\n                </tr>\n                </>    \n            )))}\n      </tbody>\n      </table>\n      {showModal === true &&\n        <UpdateUserProfile \n            data = {filteredData}\n            setData = {setFilteredData}\n            show = {showModal}\n            handleClose = {handleCloseModal}/>\n      }\n      {showConfirmModal === true && type === \"delete\" &&\n        <DeleteUserProfile\n            data =  {filteredData}\n            setData = {setFilteredData}\n            show =  {showConfirmModal}\n            handleClose = {handleCloseModal}/>\n      }  \n      </>\n      );\n}\n\nexport default ViewUserProfile;\n\nconst UpdateUserProfile = ({data, setData, show, handleClose}) => {\n    const apiUrl_UserProf = process.env.REACT_APP_API_URL_USEPROFILE;\n    const [formData, setFormData] = useState(data[0]);\n\n    const handleEdit = (event) => {\n        const {id,value} = event.target;\n        setFormData((prevFormData) => ({...prevFormData, [id]: value}));\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n    \n\n    fetch(`${apiUrl_UserProf}/Userprofile/${formData.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          setData(\"re-load parent\")\n          handleClose();\n          \n        })\n        .catch((error) => console.error(error));\n    }\n    return (\n        <>\n            <Modal show={show} onHide = {handleClose}>\n                <Modal.Body>\n                    <form onSubmit={handleSubmit}>\n                    <div class=\"form-group\">\n                        <label hmtlfor=\"UserProfile\"  class=\"col-form-label\">User Profile:</label>\n                        <input type=\"text\" onChange={handleEdit}  value={formData.Userprofile} class=\"form-control\" id=\"UserProfile\"></input>\n                    </div>\n                    <button type=\"submit\">Update</button>\n                    </form>\n                </Modal.Body>\n            </Modal>\n        </>\n    )\n    }\n\nconst DeleteUserProfile = ({data, setData, show , handleClose}) => {\n    const apiUrl_UserProf = process.env.REACT_APP_API_URL_USEPROFILE;\n    const handleDelete = e => {\n        fetch(`${apiUrl_UserProf}/Userprofile/${data[0].id}`, {\n            method: 'DELETE',\n            headers: {\n              'Content-Type': 'application/json',\n        }})\n            .then((response) => response.json())\n            .then(data => {\n              setData(\"reload\")\n            .catch((error) => console.error(error));\n        \n        handleClose()\n        })\n\n        }\n    return (\n      <>\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Body>\n            Confirm Delete User Profile?\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant = \"secondary\" onClick={handleDelete}>\n              Yes {/*handle Delete / update */}\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    )\n}\n \n","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\create\\CreateMovie.jsx",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\create\\CreateMovieSess.jsx",["243"],[],"import { useEffect, useState } from \"react\";\nimport SuccessModel from \"../../components/SuccessModal\";\nfunction CreateMovieSession() {\n     const apiUrl_Movie = process.env.REACT_APP_API_URL_MOVIE;\n     const apiUrl_Room = process.env.REACT_APP_API_URL_ROOM;\n     const apiUrl_Session = process.env.REACT_APP_API_URL_SESSION;\n\n     const [showModal, setShowModal] = useState(false);\n     const [movies, setMovies] = useState([])\n     const [rooms , setRooms] = useState([])\n     const [formData, setFormData] = useState({\n          id: \"\",\n          movie_id:  \"\",\n          movie: \"\",\n          room_id: \"\",\n          room: \"\",\n          timeslot: \"\",\n          seats :  [\n               {\n                 \"seat\" : \"A1\",\n                 \"occupy\" : \"no\",\n                 \"id\" : 1\n               },\n               {\n                 \"seat\" : \"A2\",\n                 \"occupy\" : \"no\",\n                 \"id\" : 2\n               },\n               {\n                 \"seat\" : \"A3\",\n                 \"occupy\" : \"no\",\n                 \"id\" : 3\n               },\n               {\n                 \"seat\" : \"B1\",\n                 \"occupy\" : \"no\",\n                 \"id\" : 4\n               },\n               {\n                 \"seat\" : \"B2\",\n                 \"occupy\" : \"no\",\n                 \"id\" : 5\n               },\n               {\n                 \"seat\" : \"B3\",\n                 \"occupy\" : \"no\",\n                 \"id\" : 6\n               },\n               {\n                 \"seat\" : \"C1\",\n                 \"occupy\" : \"no\",\n                 \"id\" : 7\n               },\n               {\n                 \"seat\" : \"C2\",\n                 \"occupy\" : \"no\",\n                 \"id\" : 8\n               },\n               {\n                 \"seat\" : \"C3\",\n                 \"occupy\" : \"no\",\n                 \"id\" : 9\n               }\n             ]\n     });\n\n     const loadMoviesnRooms = () => {\n          // read the data from the JSON file when the component mounts\n          fetch(`${apiUrl_Movie}/Movie`)\n          .then(response => response.json())\n          .then(data => {\n               const extractedMovies = data.map(item => ({\n                    Movie: item.Movie,\n                    id: item.id\n                  }));\n               setMovies(extractedMovies);\n               \n          })\n          .catch(error => console.error(error));\n          //fetch room too\n          fetch(`${apiUrl_Room}/Room`)\n          .then(response => response.json())\n          .then(data => {\n               const extractedRooms = data.map(item => ({\n                    Name: item.Name,\n                    id: item.id\n                  }));\n               setRooms(extractedRooms);\n          })\n          .catch(error => console.error(error));\n     }\n\n     \n     //on page load\n     useEffect(() => {\n          loadMoviesnRooms()\n     }, []);\n\n\n     const handleCloseModal = () => {\n          setShowModal(false); \n     };\n          \n     const handleEdit = (event) => {\n          const { id, value } = event.target;\n          setFormData((prevFormData) => ({ ...prevFormData, [id]: value }));\n             \n     }\n      \n     const handleSubmit = (event) =>{\n          event.preventDefault();\n          console.log(formData)\n          const movie = movies.find(movie => movie.id === parseInt(formData.movie_id));\n          console.log(\"movie\", movie)\n          const room = rooms.find(room => room.id === parseInt(formData.room_id));\n          console.log(movie)\n          fetch(`${apiUrl_Session}/moviesession`, {\n               method: 'POST',\n               headers: {\n                 'Content-Type': 'application/json',\n               },\n               body: JSON.stringify({...formData, movie: movie.Movie, room : room.Name }),\n             })\n               .then((response) => response.json())\n               .then((data) => console.log(data))\n               .catch((error) => console.error(error));\n     }\n\n     return (\n          <>\n          <form onSubmit={handleSubmit} className=\"CreateMovie text-white bg-dark d-flex-column \">\n          \n          <div className=\"form-group d-flex p-3\">\n               <p class=\"col-form-label\" style={{width:'100px'}}>Movie</p>\n               <select id=\"movie_id\" className=\"form-select text-wrap\" style={{ width: '400px'}} onChange={handleEdit}>\n                    {/* got data then use map to populate the dd */}\n                    {movies.map((option) => (\n                         <option key={option.id} value={option.id}>{option.Movie} </option>\n                    ))}\n               </select>\n          </div>\n\n          <div className=\"form-group d-flex align-items-center text-left p-3 \">\n               <p class=\"col-form-label\"  style={{width:'100px'}}>Room:</p>\n               <select id=\"room_id\" className=\"form-select text-wrap\" style={{ width: '400px'}} onChange={handleEdit}>\n                    {/* got data then use map to populate the dd */}\n                    {rooms.map((option) => (\n                         <option key={option.id} value={option.id}>{option.Name} </option>\n                    ))}\n               </select>\n          </div>\n\n          <div className=\"form-group d-flex p-3\">\n               <p  style={{width:'100px'}}>Date</p>\n               <input min={new Date().toISOString().split('T')[0]} type=\"date\" id=\"date\" class=\"form-control\" style={{ width: '400px'}} onChange={handleEdit}  ></input>\n          </div>\n\n          <div className=\"form-group d-flex align-items-center text-left p-3 \">\n               <label class=\"col-form-label\"  style={{width:'100px'}}>From:</label>\n               <input id= \"timeslot\" class=\"form-control\" type=\"text\" style={{ width: '400px'}}  onChange={handleEdit} ></input>\n          </div>\n\n          <div className=\"d-flex justify-content-center  p-3\">\n               <button type=\"submit\" onClick={()=>setShowModal(true)} className=\"btn btn-danger\">Create</button>\n          </div>\n     </form>\n          <SuccessModel \n               message = \"Movie Successfully Created !\" \n               show = {showModal}\n               handleClose={handleCloseModal}\n          />\n  </>\n     );\n   }\n   \n   export default CreateMovieSession;\n   ","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\create\\CreateRoom.jsx",[],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\view\\ViewMovie.jsx",["244","245","246","247"],[],"import { useState, useEffect } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nfunction ViewMovie() {\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showConfirmModal, setConfirmModal] = useState(false);\r\n  const [data, setData] = useState([])\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [query, setQuery] = useState('');\r\n\r\n  const apiUrl = process.env.REACT_APP_API_URL_MOVIE;\r\n\r\n  const loadData = () => {\r\n    fetch(`${apiUrl}/Movie`)\r\n    .then(response => response.json())\r\n    .then(data => setData(data))\r\n    .catch(error => console.error(error));\r\n  }\r\n  \r\n  useEffect(() => { //load data on page load \r\n    loadData()\r\n  }, [filteredData,query]);\r\n\r\n  const handleUpdate = (id) => { //filter by id and pass to modal\r\n    setFilteredData(data.filter((movieData) => movieData.id === id));\r\n    // filteredData will now contain an array with only the movie data objects that match the given id\r\n    setShowModal(true);\r\n  };\r\n\r\n\r\n  const handleChange = event => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false); \r\n    setConfirmModal(false);\r\n  };\r\n\r\n  const confirmModal = (id) => {\r\n    setFilteredData(data.filter((movieData) => movieData.id === id));\r\n    //delete modal\r\n    setConfirmModal(true); \r\n  }\r\n\r\n  const handleSearch = (e)=> {\r\n    e.preventDefault();\r\n    fetch(`${apiUrl}/Movie?Movie=${query}`)\r\n      .then(response => response.json())\r\n      .then(data => setData(data))\r\n      .catch(error => console.error(error));\r\n  };\r\n\r\n  return (\r\n    <> \r\n      <div className=\"d-flex justify-content-end\">\r\n        <form className=\"input-group p-3\" style={{width : \"350px\"}}   onSubmit={handleSearch}>\r\n          <input class=\"form-control border \" type={\"text\"} value={query} onChange={handleChange} ></input>\r\n        <button  className=\"btn btn-light\" type=\"submit\">search</button>\r\n        </form>\r\n      </div>\r\n    <table className=\"text-black\" style={{backgroundColor : \"whitesmoke\", width : '1000px'}}>\r\n      <thead>\r\n        <tr className=\"d-flex-column\" style={{backgroundColor : \"orange\"}}>\r\n          <th scope=\"col\" className=\"p-3\">Id</th>\r\n          <th scope=\"col\">Movie</th>\r\n          <th scope=\"col\">Duration</th>\r\n          <th scope=\"col\">Synopsis</th>\r\n          <th scope=\"col\" className=\"text-nowrap\">Age Rating</th>\r\n          <th scope=\"col\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody >\r\n      {data.length == 0 ?  (<p className=\"p-3 text-black\">No Matching Records</p>) : (\r\n        data?.map((movie) => (\r\n          <>\r\n          <tr key={movie.id}>\r\n            <td className=\"p-2\">{movie.id}</td>\r\n            <td className=\"p-2\">{movie.Movie}</td>\r\n            <td className=\"p-2\">{movie.Duration}</td>\r\n            <td className=\"p-2\">{movie.Synopsis}</td>\r\n            <td className=\"p-2\">{movie.AgeRating}</td>\r\n            <td>\r\n              <div className=\"d-flex align-items-center justify-content-end\"> \r\n                    <button type=\"button\" className=\"btn text-white m-1 \" style={{backgroundColor : \"royalblue\"}}\r\n                        onClick={() => handleUpdate(movie.id)}>\r\n                        Update {/*pass id instead handleupdate(id)*/}\r\n                      </button>\r\n                    <button type=\"button\" className=\"btn text-white m-1\" style={{backgroundColor : \"red\"}} onClick={() => confirmModal(movie.id)}>Delete</button>\r\n               </div>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n              <td colSpan=\"6\" className=\"border-bottom\"></td>\r\n          </tr>\r\n          </>\r\n        )))}\r\n      </tbody>\r\n    </table>\r\n    {showModal === true &&          \r\n          <UpdateMovie\r\n          data={filteredData}\r\n          setData = {setFilteredData} //setData to reload parent\r\n          show={showModal}\r\n          handleClose={handleCloseModal}\r\n        />}\r\n    {showConfirmModal == true &&\r\n        <DeleteMovie\r\n        data={filteredData}\r\n        setData ={setFilteredData}\r\n        show={showConfirmModal}\r\n        handleClose={handleCloseModal}/>\r\n    }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ViewMovie;\r\n\r\nconst UpdateMovie = ({data, setData, show, handleClose}) => {\r\n  const apiUrl_Room = process.env.REACT_APP_API_URL_ROOM;\r\n  const apiUrl_Movie = process.env.REACT_APP_API_URL_MOVIE;\r\n  const [formData, setFormData] = useState(data[0]);\r\n\r\n  const handleEdit = (event) => {\r\n    const { id, value } = event.target;\r\n    setFormData((prevFormData) => ({ ...prevFormData, [id]: value }));\r\n  };\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetch(`${apiUrl_Movie}/Movie/${formData.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setData(\"re-load parent\")\r\n        handleClose();\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }\r\n  return(\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n      <Modal.Body>\r\n      <form  onSubmit={handleSubmit}>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"id\"  class=\"col-form-label text-dark\">id:</label>\r\n            <input type=\"text\" disabled onChange={handleEdit}  value={formData.id} class=\"form-control\" id=\"id\"></input>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"Movie\" class=\"col-form-label text-dark\">Movie:</label>\r\n            <textarea class=\"form-control\" onChange={handleEdit} value={formData.Movie} id=\"Movie\"></textarea>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"Duration\" class=\"col-form-label text-dark\">Duration:</label>\r\n            <textarea class=\"form-control\" onChange={handleEdit} value={formData.Duration} id=\"Duration\"></textarea>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"Synopsis\" class=\"col-form-label text-dark\">Synopsis:</label>\r\n            <textarea class=\"form-control\" onChange={handleEdit} value={formData.Synopsis} id=\"Synopsis\"></textarea>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"AgeRating\" class=\"col-form-label text-dark\">Age Rating:</label>\r\n            <select className=\"form-select\" onChange={handleEdit} value={formData.AgeRating} id=\"AgeRating\">\r\n                  <option value=\"PG-13\">PG-12</option>\r\n                  <option value=\"PG\">PG</option>\r\n                  <option value=\"R21\">R21</option>\r\n            </select>\r\n          </div>\r\n          <button type=\"submit\">Update</button>\r\n        </form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nconst DeleteMovie = ({data, setData, show, handleClose}) => {\r\n  const apiUrl_Movie = process.env.REACT_APP_API_URL_MOVIE;\r\n  const apiUrl_Session = process.env.REACT_APP_API_URL_SESSION;\r\n\r\n  const id =data[0].id\r\n\r\n  //delete room in movie session // do here instead of in movie sessions\r\n  const handleDelete = () => {\r\n    fetch(`${apiUrl_Movie}/Movie/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(deletedMovie => {\r\n        console.log(`Deleted Movie with id ${id}`);\r\n  \r\n        // Find all movie sessions with the deleted room's id and set the room_id and Room fields to null\r\n        fetch(`${apiUrl_Session}/moviesession?movie_id=${id}`)\r\n          .then(sessionResponse => sessionResponse.json())\r\n          .then(sessionData => {\r\n            const updatedSessions = sessionData.map(session => {\r\n              return { ...session, movie_id: null, movie: null }\r\n            });\r\n            console.log(\"Updated sessions: \", updatedSessions);\r\n  \r\n            // Send a PUT request to update the MovieSession data on the server for each updated session\r\n            updatedSessions.forEach(session => {\r\n              fetch(`${apiUrl_Session}/moviesession/${session.id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(session)\r\n              })\r\n                .then(response => response.json())\r\n                .then(data => console.log(data))\r\n                .catch(error => console.error(error));\r\n            });\r\n          })\r\n          .catch(sessionError => console.error(sessionError));\r\n  \r\n        setData(\"reload\");\r\n        handleClose();\r\n      })\r\n      .catch(error => console.error(error));\r\n  };\r\n\r\n  /*\r\n  const handleDelete = () => {\r\n    fetch(`${apiUrl_Movie}/Movie/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => \r\n        setData(\"reload\"))\r\n      .catch(error => console.error(error))\r\n\r\n    handleClose()\r\n  }\r\n*/\r\n  \r\n  return(\r\n    <>\r\n    <Modal show={show} onHide={handleClose}>\r\n     <Modal.Body className=\"text-dark\">\r\n          Confirm Delete Movie ?\r\n     </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleDelete}>\r\n          Yes {/*handle delete/update*/}\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\n","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\view\\ViewRoom.jsx",["248","249","250"],[],"import { useState, useEffect} from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nfunction ViewRoom() {\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showConfirmModal, setConfirmModal] = useState(false);\r\n  const [data, setData] = useState([])\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [query, setQuery] = useState('');\r\n\r\n  const apiUrl = process.env.REACT_APP_API_URL_ROOM;\r\n\r\n  const loadData = () => {\r\n    fetch(`${apiUrl}/Room`)\r\n    .then(response => response.json())\r\n    .then(data => setData(data))\r\n    .catch(error => console.error(error));\r\n  }\r\n\r\n  useEffect(() => { //load data on page load \r\n    loadData()\r\n  }, [filteredData, query]);\r\n\r\n\r\n\r\n  const handleUpdate = (id) => { //filter by id and pass to modal\r\n    setFilteredData(data.filter((roomData) => roomData.id === id));\r\n    // filteredData will now contain an array with only the movie data objects that match the given id\r\n    setShowModal(true);\r\n  };\r\n\r\n  //for search \r\n  const handleChange = event => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false); \r\n    setConfirmModal(false);\r\n  };\r\n\r\n  const confirmModal = (id) => {\r\n    setFilteredData(data.filter((roomData) => roomData.id === id));\r\n    //delete modal\r\n    setConfirmModal(true); \r\n  }\r\n\r\n  const handleSubmit = (e)=> {\r\n    e.preventDefault();\r\n    console.log(query)\r\n    fetch(`${apiUrl}/Room?Name=${query}`)\r\n      .then(response => response.json())\r\n      .then(data => setData(data))\r\n      .catch(error => console.error(error));\r\n  };\r\n\r\n  return (\r\n     <>\r\n      <div className=\"d-flex justify-content-end\">\r\n        <form className=\"input-group p-3\" style={{width : \"350px\"}}   onSubmit={handleSubmit}>\r\n          <input class=\"form-control border \" type={\"text\"} value={query} onChange={handleChange} ></input>\r\n        <button  className=\"btn btn-light\" type=\"submit\">search</button>\r\n        </form>\r\n      </div>\r\n    <table className=\"text-black\" style={{backgroundColor : \"whitesmoke\", width : '100%'}}>\r\n      <thead>\r\n        <tr className=\"d-flex-column\" style={{backgroundColor : \"orange\"}}>\r\n          <th scope=\"col\" className=\"p-3\">Room</th>\r\n          <th scope=\"col\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody >\r\n      {data.length == 0 ?  (<p className=\"p-3 text-black\">No Matching Records</p>) : (\r\n        data?.map((room) => (\r\n          <>\r\n          <tr key={room.No}>\r\n            <td className=\"p-4\">{room.Name}</td>\r\n            <td>\r\n               <div className=\"d-flex justify-content-end\"> \r\n                    <button type=\"button\" className=\"btn text-white m-1 \" style={{backgroundColor : \"royalblue\"}} onClick={()=>handleUpdate(room.id)}>Update</button>\r\n                    <button type=\"button\" className=\"btn text-white m-1\" style={{backgroundColor : \"red\"}}  onClick={() => confirmModal(room.id)}>Delete</button>\r\n               </div>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n              <td colSpan=\"2\" className=\"border-bottom\"></td>\r\n          </tr>\r\n          </>\r\n        )))}\r\n      </tbody>\r\n     </table>\r\n     {showModal === true &&      \r\n     <UpdateRoom\r\n          data={filteredData}\r\n          setData = {setFilteredData} //setData to reload parent\r\n          show={showModal}\r\n          handleClose={handleCloseModal}\r\n        />}\r\n    {showConfirmModal == true &&\r\n        <DeleteRoom\r\n        data={filteredData}\r\n        setData ={setFilteredData}\r\n        show={showConfirmModal}\r\n        handleClose={handleCloseModal}/>\r\n    }\r\n     </>\r\n  );\r\n}\r\n\r\nexport default ViewRoom;\r\n\r\n\r\nconst UpdateRoom = ({data, setData, show, handleClose}) => {\r\n  const apiUrl_Room = process.env.REACT_APP_API_URL_ROOM;\r\n  const [formData, setFormData] = useState(data[0]);\r\n\r\n\r\n  const handleEdit = (event) => {\r\n    const { id, value } = event.target;\r\n    setFormData((prevFormData) => ({ ...prevFormData, [id]: value }));\r\n  };\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(formData.Name)\r\n    fetch(`${apiUrl_Room}/Room/${formData.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setData(\"re-load parent\")\r\n        handleClose();\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }\r\n  return(\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n      <Modal.Body>\r\n      <form  onSubmit={handleSubmit}>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"Name\"  class=\"col-form-label text-dark\">Room Name:</label>\r\n            <input type=\"text\" onChange={handleEdit}  value={formData.Name} class=\"form-control\" id=\"Name\"></input>\r\n          </div>\r\n          <button type=\"submit\">Update</button>\r\n        </form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nconst DeleteRoom = ({data, setData, show, handleClose}) => {\r\n  const apiUrl_Room = process.env.REACT_APP_API_URL_ROOM;\r\n  const apiUrl_Session = process.env.REACT_APP_API_URL_SESSION;\r\n\r\n  const id =data[0].id\r\n\r\n  //delete room in movie session // do here instead of in movie sessions\r\n  const handleDelete = () => {\r\n    fetch(`${apiUrl_Room}/Room/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(deletedRoom => {\r\n        console.log(`Deleted room with id ${id}`);\r\n  \r\n        // Find all movie sessions with the deleted room's id and set the room_id and Room fields to null\r\n        fetch(`${apiUrl_Session}/moviesession?room_id=${id}`)\r\n          .then(sessionResponse => sessionResponse.json())\r\n          .then(sessionData => {\r\n            const updatedSessions = sessionData.map(session => {\r\n              return { ...session, room_id: null, room: null }\r\n            });\r\n            console.log(\"Updated sessions: \", updatedSessions);\r\n  \r\n            // Send a PUT request to update the MovieSession data on the server for each updated session\r\n            updatedSessions.forEach(session => {\r\n              fetch(`${apiUrl_Session}/moviesession/${session.id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(session)\r\n              })\r\n                .then(response => response.json())\r\n                .then(data => console.log(data))\r\n                .catch(error => console.error(error));\r\n            });\r\n          })\r\n          .catch(sessionError => console.error(sessionError));\r\n  \r\n        setData(\"reload\");\r\n        handleClose();\r\n      })\r\n      .catch(error => console.error(error));\r\n  };\r\n  \r\n\r\n\r\n\r\n  /*\r\n  const handleDelete = () => {\r\n    fetch(`${apiUrl_Room}/Room/${data[0].id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => \r\n        {\r\n          console.log(\"id to delete\",id)\r\n          fetch(`${apiUrl_Session}/MovieSession?Room_id=${id}`)\r\n            .then(session => session.json())\r\n            .then(sessionData => {\r\n                const removeRoom = sessionData.map(session => {\r\n                  return {...session, Room_id : \"\" , Room : \"\" }\r\n                })\r\n                console.log(removeRoom)\r\n            }).catch(sessionError => console.log(sessionError))\r\n\r\n          setData(\"reload\")\r\n        }\r\n      ).catch(error => console.error(error))\r\n\r\n    handleClose()\r\n  }*/\r\n  return(\r\n    <>\r\n    <Modal show={show} onHide={handleClose}>\r\n     <Modal.Body className=\"text-dark\">\r\n          Confirm Delete Room ?\r\n     </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleDelete}>\r\n          Yes {/*handle delete/update*/}\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\view\\viewSession.jsx",["251","252","253","254","255","256","257","258","259","260","261"],[],"import { useState, useEffect } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nfunction ViewSession() {\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showConfirmModal, setConfirmModal] = useState(false);\r\n  const [data, setData] = useState([])\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [query, setQuery] = useState('');\r\n  const apiUrl_Session = process.env.REACT_APP_API_URL_SESSION;\r\n  const apiUrl_Movie = process.env.REACT_APP_API_URL_MOVIE;\r\n  const apiUrl_Room = process.env.REACT_APP_API_URL_ROOM;\r\n\r\n  const loadData = () => {\r\n\r\n    fetch(`${apiUrl_Session}/moviesession`)\r\n      .then(res => res.json())\r\n      .then(data => setData(data))\r\n      .catch(SessionError => console.error(SessionError))\r\n  }\r\n  \r\n\r\n  const handleChange = event => {\r\n    setQuery(event.target.value);\r\n  };\r\n  \r\n  const handleCloseModal = () => {\r\n    setShowModal(false); \r\n    setConfirmModal(false);\r\n  };\r\n  useEffect(() => { //load data on page load \r\n    loadData()\r\n  }, [filteredData, query]);\r\n\r\n  const handleUpdate = (id) => { //filter by id and pass to modal\r\n    setFilteredData(data.filter((sessionData) => sessionData.id === id));\r\n    // filteredData will now contain an array with only the movie data objects that match the given id\r\n    setShowModal(true);\r\n  };\r\n\r\n\r\n  const confirmModal = (id) => {\r\n    setFilteredData(data.filter((sessionData) => sessionData.id === id));\r\n    //delete modal\r\n    setConfirmModal(true); \r\n  }\r\n\r\n\r\n  const handleSubmit = (e)=> {//rename\r\n    e.preventDefault();\r\n    fetch(`${apiUrl_Session}/moviesession?movie=${query}`)\r\n      .then(response => response.json())\r\n      .then(data => setData(data))\r\n      .catch(error => console.error(error));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex justify-content-end\">\r\n        <form className=\"input-group p-3\" style={{width : \"350px\"}}   onSubmit={handleSubmit}>\r\n          <input class=\"form-control border \" type={\"text\"} value={query} onChange={handleChange} ></input>\r\n        <button  className=\"btn btn-light\" type=\"submit\">search</button>\r\n        </form>\r\n    </div>\r\n    <table className=\"text-black\" style={{backgroundColor : \"whitesmoke\", width : '1000px'}}>\r\n      <thead>\r\n        <tr className=\"d-flex-column\" style={{backgroundColor : \"orange\"}}>\r\n        <th scope=\"col\" className=\"p-3\">Movie</th>\r\n          <th scope=\"col\">Room</th>\r\n          <th scope=\"col\">Date</th>\r\n          <th scope=\"col\">Timeslot</th>\r\n          <th scope=\"col\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody >\r\n      {data.length == 0 ?  (<p className=\"p-3 text-black\">No Matching Records</p>) : (\r\n        data?.map((session) => (\r\n          <>\r\n          <tr key={session.id}>\r\n            <td className=\"p-2\">{session.movie === null ? \"Nil\" : session.movie}</td>\r\n            <td className=\"p-2\">{session.room === null ? \"Nil\" : session.room}</td>\r\n            <td className=\"p-2\">{session.date}</td>\r\n            <td className=\"p-2\">{session.timeslot}</td>\r\n            <td>\r\n               <div className=\"d-flex align-items-center justify-content-end\"> \r\n                    <button type=\"button\" className=\"btn text-white m-1 \" style={{backgroundColor : \"royalblue\"}} onClick={() => handleUpdate(session.id)}>Update</button>\r\n                    <button type=\"button\" className=\"btn text-white m-1\" style={{backgroundColor : \"red\"}} onClick={() => confirmModal(session.id)}>Delete</button>\r\n               </div>\r\n               \r\n            </td>\r\n          </tr>\r\n          <tr>\r\n              <td colSpan=\"6\" className=\"border-bottom\"></td>\r\n          </tr>\r\n          </>\r\n        )))}\r\n      </tbody>\r\n    </table>\r\n    {showModal === true &&          \r\n          <UpdateSession\r\n          data={filteredData}\r\n          setData = {setFilteredData} //setData to reload parent\r\n          show={showModal}\r\n          handleClose={handleCloseModal}\r\n        />}\r\n    {showConfirmModal == true &&\r\n        <DeleteSession\r\n        data={filteredData}\r\n        setData = {setFilteredData}\r\n        show={showConfirmModal}\r\n        handleClose={handleCloseModal}/>\r\n    }\r\n</>\r\n  );\r\n}\r\n\r\nexport default ViewSession;\r\n\r\n\r\nconst UpdateSession = ({data, setData, show, handleClose}) => {\r\n  \r\n    const apiUrl_Room = process.env.REACT_APP_API_URL_ROOM;\r\n    const apiUrl_Movie = process.env.REACT_APP_API_URL_MOVIE;\r\n    const apiUrl_Session = process.env.REACT_APP_API_URL_SESSION;\r\n    const [formData, setFormData] = useState(data[0]);\r\n    const [movies, setMovies] = useState()\r\n    const [rooms , setRooms] = useState()\r\n\r\n    useEffect(() => { //load data on page load \r\n      fetch(`${apiUrl_Movie}/Movie`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n           setMovies(data);\r\n      })\r\n      .catch(error => console.error(error));\r\n\r\n      //fetch room too\r\n      fetch(`${apiUrl_Room}/Room`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n           setRooms(data);\r\n      })\r\n      .catch(error => console.error(error));\r\n    }, []);\r\n\r\n  const handleEdit = (event) => {\r\n    const { id, value } = event.target;\r\n    setFormData((prevFormData) => ({ ...prevFormData, [id]: value }));\r\n  };\r\n\r\n  const handleSubmit = (e) => { \r\n    e.preventDefault();\r\n    console.log(formData)\r\n    var movie = null;\r\n    var room = null;\r\n    if(formData.Movie_id !== null ){   \r\n        movie = movies.find(movie => movie.id == formData.movie_id) //will return undefined and break\r\n        movie = movie.Movie\r\n      }\r\n    if(formData.room_id !== null){\r\n      room = rooms.find(room => room.id == formData.room_id)\r\n      room = room.Name\r\n    }\r\n\r\n    fetch(`${apiUrl_Session}/moviesession/${formData.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        ...formData, \r\n        movie : movie,\r\n        room : room,\r\n        room_id : parseInt(formData.room_id),\r\n        movie_id : parseInt(formData.movie_id)\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data)\r\n        setData(\"reload parent\")\r\n        handleClose();\r\n        \r\n      })\r\n      .catch((error) => console.error(error));\r\n\r\n    //when submit need to update movie based on movie_id\r\n      /*\r\n    fetch(`${apiUrl_Movie}/Movie`)\r\n    .then(movieResponse => movieResponse.json())\r\n    .then(movieData => {\r\n      const matchingMovie = movieData.find(movie => movie.Movie === formData.Movie);\r\n      const movieId = matchingMovie ? matchingMovie.id : null;\r\n      // Update the movie_id field of the movie_session item using the fetched movieId\r\n      fetch(`${apiUrl_Session}/MovieSession/${formData.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ ...formData, Movie_id: movieId }),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setData(\"reload parent\")\r\n          handleClose();\r\n        })\r\n        .catch((error) => console.error(error));\r\n    })\r\n    .catch(movieError => console.error(movieError))\r\n      */  \r\n  }\r\n  return(\r\n    <>\r\n        <Modal show={show} onHide={handleClose}>\r\n        <Modal.Body>\r\n        <form onSubmit={handleSubmit}>\r\n        <div class=\"form-group\">\r\n            <label hmtlfor=\"movie\" class=\"col-form-label text-dark\">Movie:</label>\r\n            <select className=\"form-select\" onChange={handleEdit} value={formData.movie_id} id=\"movie_id\">\r\n                {movies?.map((option) => (\r\n                        <option key={option.id} value={option.id}>{option.Movie} </option>\r\n                    ))}\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"room\" class=\"col-form-label text-dark\">Room:</label>\r\n            <select className=\"form-select\" onChange={handleEdit} value={formData.room_id} id=\"room_id\">\r\n                {rooms?.map((option) => (\r\n                        <option key={option.id} value={option.id}>{option.Name}</option>\r\n                    ))}\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"Date\" class=\"col-form-label text-dark\">Date:</label>\r\n            <input type=\"date\" class=\"form-control\" min={new Date().toISOString().split('T')[0]} onChange={handleEdit} value={formData.Date} id=\"Date\"></input>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label hmtlfor=\"Start\" class=\"col-form-label text-dark\">Timeslot:</label>\r\n            <input type=\"text\" class=\"form-control\" onChange={handleEdit} value={formData.Start} id=\"timeslot\"></input>\r\n          </div>\r\n          <button type=\"submit\">update</button>\r\n        </form>\r\n        </Modal.Body>\r\n        \r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nconst DeleteSession = ({data, setData, show, handleClose}) => {\r\n  const [id, setId] = useState(data[0].id)\r\n  const apiUrl_Room = process.env.REACT_APP_API_URL_ROOM;\r\n  const apiUrl_Movie = process.env.REACT_APP_API_URL_MOVIE;\r\n  const apiUrl_Session = process.env.REACT_APP_API_URL_SESSION;\r\n\r\n  const handleDelete = () => {\r\n    \r\n    fetch(`${apiUrl_Session}/moviesession/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => \r\n        setData(\"reload\"))\r\n      .catch(error => console.error(error))\r\n\r\n    handleClose()\r\n  }\r\n\r\n  return(\r\n    <>\r\n    <Modal show={show} onHide={handleClose}>\r\n     <Modal.Body className=\"text-dark\">\r\n          Confirm Delete Movie Session ? \r\n     </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleDelete}>\r\n          Yes {/*handle delete/update*/}\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\n    /*\r\n    fetch(`${apiUrl_Movie}/Movie`)\r\n      .then(movieResponse => movieResponse.json())\r\n      .then(movieData => {\r\n        fetch(`${apiUrl_Session}/MovieSession`)\r\n          .then(sessionResponse => sessionResponse.json())\r\n          .then(sessionData => {\r\n            fetch(`${apiUrl_Room}/Room`) // fetch room data\r\n              .then(roomResponse => roomResponse.json())\r\n              .then(roomData => {\r\n                // Join the movie, movie_session, and room arrays based on their id/movie_id/room_id fields\r\n                const joinedData = sessionData.map(session => {\r\n                  const movie = movieData.find(movie => movie.id === parseInt(session.Movie_id));\r\n                  const movieTitle = movie ? movie.Movie: \"Nil\";\r\n                  const room = roomData.find(room => room.id === parseInt(session.Room_id));\r\n                  const roomName = room ? room.Name : \"Nil\";\r\n                  return { ...session, Movie: movieTitle, Room: roomName };\r\n                });\r\n               \r\n                setData(joinedData); // set the state variable to the joined data\r\n              })\r\n              .catch(roomError => console.error(roomError));\r\n          })\r\n          .catch(sessionError => console.error(sessionError));\r\n      })\r\n      .catch(movieError => console.error(movieError));\r\n      */","C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\Manager\\report\\GenerateReport.jsx",["262","263"],[],"C:\\Users\\yawja\\Documents\\GitHub\\SDMSS\\src\\components\\SuccessModal.jsx",["264"],[],{"ruleId":"265","severity":1,"message":"266","line":3,"column":10,"nodeType":"267","messageId":"268","endLine":3,"endColumn":14},{"ruleId":"269","severity":1,"message":"270","line":71,"column":41,"nodeType":"271","endLine":71,"endColumn":129},{"ruleId":"269","severity":1,"message":"270","line":80,"column":37,"nodeType":"271","endLine":80,"endColumn":124},{"ruleId":"269","severity":1,"message":"272","line":78,"column":17,"nodeType":"271","endLine":78,"endColumn":130},{"ruleId":"273","severity":1,"message":"274","line":172,"column":57,"nodeType":"271","endLine":172,"endColumn":145},{"ruleId":"265","severity":1,"message":"275","line":3,"column":23,"nodeType":"267","messageId":"268","endLine":3,"endColumn":34},{"ruleId":"265","severity":1,"message":"276","line":10,"column":24,"nodeType":"267","messageId":"268","endLine":10,"endColumn":37},{"ruleId":"265","severity":1,"message":"266","line":3,"column":10,"nodeType":"267","messageId":"268","endLine":3,"endColumn":14},{"ruleId":"269","severity":1,"message":"270","line":61,"column":21,"nodeType":"271","endLine":61,"endColumn":56},{"ruleId":"269","severity":1,"message":"270","line":68,"column":21,"nodeType":"271","endLine":68,"endColumn":56},{"ruleId":"269","severity":1,"message":"270","line":70,"column":21,"nodeType":"271","endLine":70,"endColumn":56},{"ruleId":"269","severity":1,"message":"270","line":72,"column":21,"nodeType":"271","endLine":72,"endColumn":56},{"ruleId":"269","severity":1,"message":"272","line":74,"column":21,"nodeType":"271","endLine":74,"endColumn":41},{"ruleId":"269","severity":1,"message":"272","line":38,"column":21,"nodeType":"271","endLine":38,"endColumn":41},{"ruleId":"265","severity":1,"message":"277","line":3,"column":10,"nodeType":"267","messageId":"268","endLine":3,"endColumn":21},{"ruleId":"265","severity":1,"message":"278","line":7,"column":11,"nodeType":"267","messageId":"268","endLine":7,"endColumn":18},{"ruleId":"265","severity":1,"message":"276","line":11,"column":24,"nodeType":"267","messageId":"268","endLine":11,"endColumn":37},{"ruleId":"265","severity":1,"message":"279","line":2,"column":20,"nodeType":"267","messageId":"268","endLine":2,"endColumn":29},{"ruleId":"265","severity":1,"message":"266","line":3,"column":10,"nodeType":"267","messageId":"268","endLine":3,"endColumn":14},{"ruleId":"265","severity":1,"message":"277","line":3,"column":29,"nodeType":"267","messageId":"268","endLine":3,"endColumn":40},{"ruleId":"265","severity":1,"message":"279","line":2,"column":20,"nodeType":"267","messageId":"268","endLine":2,"endColumn":29},{"ruleId":"265","severity":1,"message":"266","line":3,"column":10,"nodeType":"267","messageId":"268","endLine":3,"endColumn":14},{"ruleId":"265","severity":1,"message":"277","line":3,"column":29,"nodeType":"267","messageId":"268","endLine":3,"endColumn":40},{"ruleId":"265","severity":1,"message":"266","line":5,"column":10,"nodeType":"267","messageId":"268","endLine":5,"endColumn":14},{"ruleId":"280","severity":1,"message":"281","line":58,"column":6,"nodeType":"282","endLine":58,"endColumn":13,"suggestions":"283"},{"ruleId":"265","severity":1,"message":"277","line":2,"column":10,"nodeType":"267","messageId":"268","endLine":2,"endColumn":21},{"ruleId":"265","severity":1,"message":"266","line":4,"column":10,"nodeType":"267","messageId":"268","endLine":4,"endColumn":14},{"ruleId":"280","severity":1,"message":"281","line":54,"column":6,"nodeType":"282","endLine":54,"endColumn":13,"suggestions":"284"},{"ruleId":"285","severity":1,"message":"286","line":38,"column":23,"nodeType":"287","messageId":"288","endLine":38,"endColumn":25},{"ruleId":"285","severity":1,"message":"286","line":39,"column":23,"nodeType":"287","messageId":"288","endLine":39,"endColumn":25},{"ruleId":"285","severity":1,"message":"286","line":40,"column":23,"nodeType":"287","messageId":"288","endLine":40,"endColumn":25},{"ruleId":"285","severity":1,"message":"286","line":41,"column":23,"nodeType":"287","messageId":"288","endLine":41,"endColumn":25},{"ruleId":"265","severity":1,"message":"266","line":2,"column":23,"nodeType":"267","messageId":"268","endLine":2,"endColumn":27},{"ruleId":"265","severity":1,"message":"289","line":20,"column":12,"nodeType":"267","messageId":"268","endLine":20,"endColumn":22},{"ruleId":"285","severity":1,"message":"286","line":84,"column":25,"nodeType":"287","messageId":"288","endLine":84,"endColumn":27},{"ruleId":"285","severity":1,"message":"286","line":85,"column":25,"nodeType":"287","messageId":"288","endLine":85,"endColumn":27},{"ruleId":"285","severity":1,"message":"286","line":86,"column":24,"nodeType":"287","messageId":"288","endLine":86,"endColumn":26},{"ruleId":"285","severity":1,"message":"286","line":87,"column":24,"nodeType":"287","messageId":"288","endLine":87,"endColumn":26},{"ruleId":"285","severity":1,"message":"286","line":88,"column":24,"nodeType":"287","messageId":"288","endLine":88,"endColumn":26},{"ruleId":"285","severity":1,"message":"286","line":89,"column":24,"nodeType":"287","messageId":"288","endLine":89,"endColumn":26},{"ruleId":"285","severity":1,"message":"286","line":90,"column":24,"nodeType":"287","messageId":"288","endLine":90,"endColumn":26},{"ruleId":"280","severity":1,"message":"290","line":25,"column":7,"nodeType":"282","endLine":25,"endColumn":9,"suggestions":"291"},{"ruleId":"280","severity":1,"message":"292","line":24,"column":6,"nodeType":"282","endLine":24,"endColumn":27,"suggestions":"293"},{"ruleId":"285","severity":1,"message":"286","line":83,"column":22,"nodeType":"287","messageId":"288","endLine":83,"endColumn":24},{"ruleId":"280","severity":1,"message":"290","line":150,"column":6,"nodeType":"282","endLine":150,"endColumn":8,"suggestions":"294"},{"ruleId":"280","severity":1,"message":"292","line":26,"column":12,"nodeType":"282","endLine":26,"endColumn":33,"suggestions":"295"},{"ruleId":"285","severity":1,"message":"286","line":74,"column":22,"nodeType":"287","messageId":"288","endLine":74,"endColumn":24},{"ruleId":"280","severity":1,"message":"296","line":97,"column":9,"nodeType":"282","endLine":97,"endColumn":11,"suggestions":"297"},{"ruleId":"280","severity":1,"message":"292","line":22,"column":6,"nodeType":"282","endLine":22,"endColumn":26,"suggestions":"298"},{"ruleId":"285","severity":1,"message":"286","line":74,"column":20,"nodeType":"287","messageId":"288","endLine":74,"endColumn":22},{"ruleId":"285","severity":1,"message":"286","line":107,"column":23,"nodeType":"287","messageId":"288","endLine":107,"endColumn":25},{"ruleId":"265","severity":1,"message":"299","line":121,"column":9,"nodeType":"267","messageId":"268","endLine":121,"endColumn":20},{"ruleId":"280","severity":1,"message":"292","line":22,"column":6,"nodeType":"282","endLine":22,"endColumn":27,"suggestions":"300"},{"ruleId":"285","severity":1,"message":"286","line":73,"column":20,"nodeType":"287","messageId":"288","endLine":73,"endColumn":22},{"ruleId":"285","severity":1,"message":"286","line":99,"column":23,"nodeType":"287","messageId":"288","endLine":99,"endColumn":25},{"ruleId":"265","severity":1,"message":"301","line":11,"column":9,"nodeType":"267","messageId":"268","endLine":11,"endColumn":21},{"ruleId":"265","severity":1,"message":"299","line":12,"column":9,"nodeType":"267","messageId":"268","endLine":12,"endColumn":20},{"ruleId":"280","severity":1,"message":"292","line":33,"column":6,"nodeType":"282","endLine":33,"endColumn":27,"suggestions":"302"},{"ruleId":"285","severity":1,"message":"286","line":76,"column":20,"nodeType":"287","messageId":"288","endLine":76,"endColumn":22},{"ruleId":"285","severity":1,"message":"286","line":106,"column":23,"nodeType":"287","messageId":"288","endLine":106,"endColumn":25},{"ruleId":"280","severity":1,"message":"303","line":144,"column":8,"nodeType":"282","endLine":144,"endColumn":10,"suggestions":"304"},{"ruleId":"285","severity":1,"message":"286","line":157,"column":47,"nodeType":"287","messageId":"288","endLine":157,"endColumn":49},{"ruleId":"285","severity":1,"message":"286","line":161,"column":41,"nodeType":"287","messageId":"288","endLine":161,"endColumn":43},{"ruleId":"265","severity":1,"message":"305","line":251,"column":14,"nodeType":"267","messageId":"268","endLine":251,"endColumn":19},{"ruleId":"265","severity":1,"message":"299","line":252,"column":9,"nodeType":"267","messageId":"268","endLine":252,"endColumn":20},{"ruleId":"265","severity":1,"message":"301","line":253,"column":9,"nodeType":"267","messageId":"268","endLine":253,"endColumn":21},{"ruleId":"265","severity":1,"message":"306","line":5,"column":10,"nodeType":"267","messageId":"268","endLine":5,"endColumn":14},{"ruleId":"280","severity":1,"message":"307","line":42,"column":6,"nodeType":"282","endLine":42,"endColumn":8,"suggestions":"308"},{"ruleId":"265","severity":1,"message":"309","line":3,"column":10,"nodeType":"267","messageId":"268","endLine":3,"endColumn":18},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useNavigate' is defined but never used.","'setitemstatus' is assigned a value but never used.","'useLocation' is defined but never used.","'history' is assigned a value but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleSomething'. Either include it or remove the dependency array.","ArrayExpression",["310"],["311"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'currentUrl' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'apiUrl_profile'. Either include it or remove the dependency array.",["312"],"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["313"],["314"],["315"],"React Hook useEffect has a missing dependency: 'loadMoviesnRooms'. Either include it or remove the dependency array.",["316"],["317"],"'apiUrl_Room' is assigned a value but never used.",["318"],"'apiUrl_Movie' is assigned a value but never used.",["319"],"React Hook useEffect has missing dependencies: 'apiUrl_Movie' and 'apiUrl_Room'. Either include them or remove the dependency array.",["320"],"'setId' is assigned a value but never used.","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'apiUrl_tx'. Either include it or remove the dependency array.",["321"],"'useState' is defined but never used.",{"desc":"322","fix":"323"},{"desc":"322","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"325","fix":"329"},{"desc":"327","fix":"330"},{"desc":"331","fix":"332"},{"desc":"327","fix":"333"},{"desc":"327","fix":"334"},{"desc":"327","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},"Update the dependencies array to be: [data2, handleSomething]",{"range":"340","text":"341"},{"range":"342","text":"341"},"Update the dependencies array to be: [apiUrl_profile]",{"range":"343","text":"344"},"Update the dependencies array to be: [filteredData, loadData, query]",{"range":"345","text":"346"},{"range":"347","text":"344"},{"range":"348","text":"346"},"Update the dependencies array to be: [loadMoviesnRooms]",{"range":"349","text":"350"},{"range":"351","text":"346"},{"range":"352","text":"346"},{"range":"353","text":"346"},"Update the dependencies array to be: [apiUrl_Movie, apiUrl_Room]",{"range":"354","text":"355"},"Update the dependencies array to be: [apiUrl_tx]",{"range":"356","text":"357"},[1854,1861],"[data2, handleSomething]",[1691,1698],[782,784],"[apiUrl_profile]",[724,745],"[filteredData, loadData, query]",[5171,5173],[811,832],[2821,2823],"[loadMoviesnRooms]",[671,691],[665,686],[996,1017],[4897,4899],"[apiUrl_Movie, apiUrl_Room]",[1341,1343],"[apiUrl_tx]"]